#!/usr/bin/env bash
set -euxo pipefail

# This script is rendered by Terraform. Do not run directly.

REPO_URL="${repo_url}"
TAG="${repo_tag}"
BASE_URL="${base_url}"
LOGS_VOLUME_ID="${logs_volume_id}"
REPOS_VOLUME_ID="${repos_volume_id}"
DB_DATA_VOLUME_ID="${db_data_volume_id}"

echo "Installing Elements $${TAG} from $${REPO_URL}"

# Createst groups and users for elements
groupadd -g 10000 --system elements
useradd -u 10000 --home-dir /opt/elements --system --gid elements --shell /sbin/nologin --no-create-home elements

# Make mount points
mkdir -p /mnt/db_data /mnt/logs /mnt/repos

# Update packages
dnf update -y

# Add repository for Docker
dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

# Install packages
dnf install -y docker git awscli

# Install Docker Compose plugin
mkdir -p /usr/libexec/docker/cli-plugins
curl -SL "https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-linux-x86_64" \
  -o /usr/libexec/docker/cli-plugins/docker-compose
chmod +x /usr/libexec/docker/cli-plugins/docker-compose

# Start Docker and enable on boot
systemctl enable --now docker

# Add ec2-user to the docker group
usermod -aG docker elements
usermod -aG docker ec2-user

# Verify Docker Compose installation
docker compose version

# Define mapping of volume IDs to mount points (stripping the dash)

declare -A VOLUME_MOUNTS=(
  ["$${LOGS_VOLUME_ID/vol-/vol}"]="/mnt/logs"
  ["$${REPOS_VOLUME_ID/vol-/vol}"]="/mnt/repos"
  ["$${DB_DATA_VOLUME_ID/vol-/vol}"]="/mnt/db_data"
)

for volid in "$${!VOLUME_MOUNTS[@]}"; do

  # Find the device path for this volume ID
  device="/dev/disk/by-id/nvme-Amazon_Elastic_Block_Store_$${volid}"

  echo "Setting up device: $device"

  # Wait for device to be ready
  while [ ! -b "$device" ]; do
    echo "Waiting for $device to appear..."
    sleep 1
  done

  # Format if needed
  if ! blkid "$device"; then
    echo "Formatting $device..."
    mkfs.ext4 "$device"
  fi

  # Create mount point
  mkdir -p "$${VOLUME_MOUNTS[$volid]}"

  # Mount
  mount "$device" "$${VOLUME_MOUNTS[$volid]}"

  # Add to fstab
  echo "$device $${VOLUME_MOUNTS[$volid]} ext4 defaults,nofail 0 2" >> /etc/fstab
done

# Clone the specified tag/branch/commit from Git
git clone "$REPO_URL" /opt/elements
git -C /opt/elements checkout "$TAG"

# Sets all ownership such that the new user may access it
chown -R elements:elements /opt/elements
chown -R elements:elements /mnt/logs /mnt/repos /mnt/db_data

# Configure the Elements application
cat >/opt/elements/volume/ws/conf/elements.properties <<EOF
dev.getelements.elements.mongo.uri=mongodb://mongo:27017
dev.getelements.elements.cors.allowed.origins=${base_url}
dev.getelements.elements.doc.url=${base_url}/doc
dev.getelements.elements.api.url=${base_url}/api/rest
dev.getelements.elements.code.serve.url=${base_url}/code
dev.getelements.elements.http.tunnel.url=${base_url}/app
EOF

# Create an environment file for Elements
cat >/opt/elements/.env <<EOF
WS_LOG_DIR=/mnt/logs
WS_REPO_DIR=/mnt/repos
DB_HOST_DIR=/mnt/db_data
EOF

# Ensure start/stop scripts are executable
chmod +x /opt/elements/start-demon.bash
chmod +x /opt/elements/stop-demon.bash

# Create a systemd service to manage the daemon
cat >/etc/systemd/system/elements.service <<EOF
[Unit]
Description=Elements Docker Compose Daemon
After=network.target docker.service
Requires=docker.service

[Service]
Type=simple
User=elements
Group=elements
WorkingDirectory=/opt/elements
ExecStart=/opt/elements/start-demon.bash
ExecStop=/opt/elements/stop-demon.bash
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

# Reload systemd and start the service
systemctl daemon-reload
systemctl enable elements.service
systemctl start elements.service
